#include <virtuabotixRTC.h>
#include <math.h>
#include "sunpos.h"

virtuabotixRTC myRTC(6, 7, 8);
int godzina;

void sunpos( cLocation udtLocation, cSunCoordinates *udtSunCoordinates );

cLocation
udtLocation = { 19.41667, 53.25 };

cSunCoordinates
udtSunCoordinates;

void setup()
{
  Serial.begin(115200);
  // Set the current date, and time in the following format:
  // seconds, minutes, hours, day of the week, day of the month, month, year
  myRTC.setDS1302Time(50, 25, 13, 4, 20, 1, 2022);

  
  sunpos( (cLocation *)&udtLocation,
          (cSunCoordinates *)&udtSunCoordinates );
}//setup

void loop()
{
  myRTC.updateTime();
  double (godzina = myRTC.hours + 1);
  Serial.print("Wysokość geograficzna: ");
  Serial.print(udtLocation.dLatitude);
  Serial.print(" Długość geograficzna: ");
  Serial.print(udtLocation.dLongitude);
  Serial.println();
  Serial.print("Data: ");
  Serial.print(myRTC.dayofmonth);
  Serial.print(" ");
  Serial.print(myRTC.month);
  Serial.print(" ");
  Serial.print(myRTC.year);
  Serial.println();
  Serial.print("Czas: ");
  Serial.print(godzina); Serial.print(" ");  Serial.print(myRTC.minutes); Serial.print(" ");  Serial.print(myRTC.seconds); Serial.println();
  Serial.print( "Elevation : " ); Serial.println( 90.0 - udtSunCoordinates.dZenithAngle );
  Serial.print( "Azimuth   : " ); Serial.println( udtSunCoordinates.dAzimuth );
  Serial.println();
  Serial.println();
  delay(3000);
  
}//loop

void sunpos( cLocation *udtLocation, cSunCoordinates *udtSunCoordinates )
{
  // Główne zmienne
  double dElapsedJulianDays;
  double dDecimalHours;
  double dEclipticLongitude;
  double dEclipticObliquity;
  double dRightAscension;
  double dDeclination;

  // Zmienne pomocnicze
  double dY;
  double dX;

  // Obliczanie różnicy między aktualną datą julianską, a data 
  // JD 2351545.0, która jest 1 Stycznia 2000 czasu uniwersalnego 
  //{

  double dJulianDate;
  long int liAux1;
  long int liAux2;
  myRTC.updateTime();
  // Calculate time of the day in UT decimal hours
  dDecimalHours = myRTC.hours + (myRTC.minutes + myRTC.seconds / 60.0 ) / 60.0;
  // Obliczanie aktualnej daty juliańskiej
  liAux1 = (myRTC.month - 14) / 12;
  liAux2 = (1461 * (myRTC.year + 4800 + liAux1)) / 4 + (367 * (myRTC.month - 2 - 12 * liAux1)) / 12 - (3 * ((myRTC.year + 4900 + liAux1) / 100)) / 4 + myRTC.dayofmonth - 32075;
  dJulianDate = (double)(liAux2) - 0.5 + dDecimalHours / 24.0;
  Serial.print( "Julian date " ); Serial.println( dJulianDate );
  Serial.print( "Decimalhours " ); Serial.println( dDecimalHours );
  // Obliczanie róznicy miedzy aktualną datą juliańską and JD 2451545.0
  dElapsedJulianDays = dJulianDate - 2451545.0;

  //}

  // Calculate ecliptic coordinates (ecliptic longitude and obliquity of the
  // ecliptic in radians but without limiting the angle to be less than 2*Pi
  // (i.e., the result may be greater than 2*Pi)
  //{
  double dMeanLongitude;
  double dMeanAnomaly;
  double dOmega;
  dOmega = 2.1429 - 0.0010394594 * dElapsedJulianDays;
  dMeanLongitude = 4.8950630 + 0.017202791698 * dElapsedJulianDays; // Radians
  dMeanAnomaly = 6.2400600 + 0.0172019699 * dElapsedJulianDays;
  dEclipticLongitude = dMeanLongitude + 0.03341607 * sin( dMeanAnomaly ) + 0.00034894 * sin( 2 * dMeanAnomaly ) - 0.0001134 - 0.0000203 * sin(dOmega);
  dEclipticObliquity = 0.4090928 - 6.2140e-9 * dElapsedJulianDays + 0.0000396 * cos(dOmega);
  //}

  // Calculate celestial coordinates ( right ascension and declination ) in radians
  // but without limiting the angle to be less than 2*Pi (i.e., the result may be
  // greater than 2*Pi)
  //{
  double dSin_EclipticLongitude;
  dSin_EclipticLongitude = sin( dEclipticLongitude );
  dY = cos( dEclipticObliquity ) * dSin_EclipticLongitude;
  dX = cos( dEclipticLongitude );
  dRightAscension = atan2( dY, dX );
  if ( dRightAscension < 0.0 )
    dRightAscension = dRightAscension + twopi;
  dDeclination = asin( sin( dEclipticObliquity ) * dSin_EclipticLongitude );
  //}

  // Calculate local coordinates ( azimuth and zenith angle ) in degrees
  //{
  double dGreenwichMeanSiderealTime;
  double dLocalMeanSiderealTime;
  double dLatitudeInRadians;
  double dHourAngle;
  double dCos_Latitude;
  double dSin_Latitude;
  double dCos_HourAngle;
  double dParallax;
  dGreenwichMeanSiderealTime = 6.6974243242 + 0.0657098283 * dElapsedJulianDays + dDecimalHours;
  dLocalMeanSiderealTime = (dGreenwichMeanSiderealTime * 15 + udtLocation->dLongitude) * rad;
  dHourAngle = dLocalMeanSiderealTime - dRightAscension;
  dLatitudeInRadians = udtLocation->dLatitude * rad;
  dCos_Latitude = cos( dLatitudeInRadians );
  dSin_Latitude = sin( dLatitudeInRadians );
  dCos_HourAngle = cos( dHourAngle );
  udtSunCoordinates->dZenithAngle = (acos( dCos_Latitude * dCos_HourAngle * cos(dDeclination) + sin( dDeclination ) * dSin_Latitude));
  dY = -sin( dHourAngle );
  dX = tan( dDeclination ) * dCos_Latitude - dSin_Latitude * dCos_HourAngle;
  udtSunCoordinates->dAzimuth = atan2( dY, dX );

  if ( udtSunCoordinates->dAzimuth < 0.0 )
    udtSunCoordinates->dAzimuth = udtSunCoordinates->dAzimuth + twopi;
  udtSunCoordinates->dAzimuth = udtSunCoordinates->dAzimuth / rad;

  // Parallax Correction
  dParallax = (dEarthMeanRadius / dAstronomicalUnit) * sin(udtSunCoordinates->dZenithAngle);
  udtSunCoordinates->dZenithAngle = (udtSunCoordinates->dZenithAngle + dParallax) / rad;
  //

}//sunpos
